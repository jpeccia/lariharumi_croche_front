import { toast } from 'react-toastify';

// Tipos de notifica√ß√£o
export type ToastType = 'success' | 'error' | 'warning' | 'info';

// Configura√ß√µes padr√£o para cada tipo
const toastConfigs = {
  success: {
    position: 'top-right' as const,
    autoClose: 3000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    theme: 'light' as const,
  },
  error: {
    position: 'top-right' as const,
    autoClose: 5000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    theme: 'light' as const,
  },
  warning: {
    position: 'top-right' as const,
    autoClose: 4000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    theme: 'light' as const,
  },
  info: {
    position: 'top-right' as const,
    autoClose: 3000,
    hideProgressBar: false,
    closeOnClick: true,
    pauseOnHover: true,
    draggable: true,
    theme: 'light' as const,
  },
};

// Fun√ß√£o principal para mostrar notifica√ß√µes
export const showToast = (type: ToastType, message: string, options?: Record<string, unknown>) => {
  const config = { ...toastConfigs[type], ...options };
  
  switch (type) {
    case 'success':
      return toast.success(message, config);
    case 'error':
      return toast.error(message, config);
    case 'warning':
      return toast.warning(message, config);
    case 'info':
      return toast.info(message, config);
    default:
      return toast(message, config);
  }
};

// Fun√ß√µes espec√≠ficas para cada tipo
export const showSuccess = (message: string, options?: Record<string, unknown>) => 
  showToast('success', message, options);

export const showError = (message: string, options?: Record<string, unknown>) => 
  showToast('error', message, options);

export const showWarning = (message: string, options?: Record<string, unknown>) => 
  showToast('warning', message, options);

export const showInfo = (message: string, options?: Record<string, unknown>) => 
  showToast('info', message, options);

// Fun√ß√µes espec√≠ficas para contextos da aplica√ß√£o
export const showProductSuccess = (action: string) => 
  showSuccess(`Produto ${action} com sucesso! ‚ú®`);

export const showCategorySuccess = (action: string) => 
  showSuccess(`Categoria ${action} com sucesso! üéâ`);

export const showImageSuccess = (action: string) => 
  showSuccess(`Imagem ${action} com sucesso! üì∏`);

export const showNetworkError = () => 
  showError('Erro de conex√£o. Verifique sua internet e tente novamente. üåê');

export const showServerError = () => 
  showError('Erro interno do servidor. Tente novamente mais tarde. ‚ö†Ô∏è');

export const showAuthError = () => 
  showError('Sess√£o expirada. Fa√ßa login novamente. üîê');

// Fun√ß√µes espec√≠ficas para o cat√°logo de croch√™
export const showCatalogError = () => 
  showError('Erro ao carregar cat√°logo. Tente recarregar a p√°gina. üß∂');

export const showImageLoadError = () => 
  showWarning('Algumas imagens podem n√£o carregar corretamente. üì∑');

export const showCategoryLoadError = () => 
  showError('Erro ao carregar categorias. Verifique sua conex√£o. üìÇ');

export const showProductLoadError = () => 
  showError('Erro ao carregar produtos. Tente novamente. üéÅ');

export const showLoading = (message: string = 'Carregando...') => 
  showInfo(message, { autoClose: false });

export const dismissToast = (toastId?: string | number) => {
  if (toastId) {
    toast.dismiss(toastId);
  } else {
    toast.dismiss();
  }
};

// Fun√ß√£o para mostrar notifica√ß√£o de carregamento e retornar ID para dismiss
export const showLoadingToast = (message: string = 'Carregando...') => {
  return toast.loading(message, {
    position: 'top-right',
    theme: 'light',
  });
};

// Fun√ß√£o para atualizar toast de loading para success/error
export const updateToast = (toastId: string | number, type: ToastType, message: string) => {
  toast.update(toastId, {
    render: message,
    type: type,
    isLoading: false,
    autoClose: type === 'error' ? 5000 : 3000,
  });
};
